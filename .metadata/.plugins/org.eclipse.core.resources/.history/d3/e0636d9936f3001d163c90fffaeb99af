/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#define LCD_ADDR (0x27<<1)

	//======Передача сообщения======*//


	//======Передача сообщения======*//
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void LCD_En(void);
void LCD_Init(void);
void lcd1602_Init(void);
void lcd1602_Send_init_Data(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */




//  TXbuff =0x34;
//
//  /*========Power on========*/
//  HAL_Delay(15);
//
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  HAL_Delay(5);
//
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  HAL_Delay(1);
//
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  /*====Вкл 4х битный интерфейс====*/
//  TXbuff = 0x20;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  /*====Вкл 4х битный интерфейс====*/
//
//  /*======2 строки, шрифт 5х8======*/
//  TXbuff = 0x20;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  TXbuff = 0x80;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  /*======2 строки, шрифт 5х8======*/
//
//  /*========Выключить дисплей========*/
//  TXbuff = 0x00;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  TXbuff = 0x80;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  /*========Выключить дисплей========*/
//
//  /*========Очистить дисплей========*/
//  TXbuff = 0x00;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  TXbuff = 0x10;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//    /*========Очистить дисплей========*/
//
//  /*========Режим сдвига курсора========*/
//  TXbuff = 0x00;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  TXbuff = 0x30;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//    /*========Режим сдвига курсора========*/
//
//  /*========Инициализация завершена. Включить дисплей========*/
//  TXbuff = 0x00;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//
//  TXbuff = 0x30;
//  TXbuff |=0x04;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  HAL_Delay(5);
//  TXbuff &=~0xC0;
//  HAL_I2C_Master_Transmit(&hi2c1,  (uint16_t)LCD_ADDR, TXbuff, 1, 1000);
//  /*========Инициализация завершена. Включить дисплей========*/
//
//
//  /*======передача символа======*/

  /* USER CODE END 2 */
lcd1602_Init();
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  uint8_t Data = 0x30;
//	  lcd1602_SendDat(Data);

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
	  HAL_Delay(100);


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void LCD_En(void)
{
	uint8_t TxBuff = 0;
	TxBuff |= 0x04;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, TxBuff, 1, 1);
	HAL_Delay(20);
	TxBuff &= ~0x04;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, TxBuff, 1, 1);
	HAL_Delay(20);
}
/*====== Функция инициализации дисплея =======*/
void LCD_Init(void)
{

	HAL_Delay(10);
	uint8_t data = 0;
	data = 0x3;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	HAL_Delay(10);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	HAL_Delay(150);
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();

	data=0x2;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	/*===Function set===*/
	data = 0x0;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	data = 0x2c;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	/*===Function set===*/

	/*===Display off===*/
	data = 0x0;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	data = 0xf;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	/*===Display off===*/

	/*===Display clear===*/
	data = 0x0;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	data = 0x1;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	/*===Display clear===*/


	/*===Entry mode set===*/
	data = 0x2;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	data = 0xc;
	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data, 1, 1);
	LCD_En();
	/*===Entry mode set===*/
}
/*====== Функция инициализации дисплея =======*/
void lcd1602_Init(void) {
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
	lcd1602_Send_init_Data(&tx_buffer);
	tx_buffer = 0x80;
	lcd1602_Send_init_Data(&tx_buffer);
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
	lcd1602_Send_init_Data(&tx_buffer);
	tx_buffer = 0x80;
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
	lcd1602_Send_init_Data(&tx_buffer);
	tx_buffer = 0x10;
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
	lcd1602_Send_init_Data(&tx_buffer);
	tx_buffer = 0x30;
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
	lcd1602_Send_init_Data(&tx_buffer);
	tx_buffer = 0xC0;
	lcd1602_Send_init_Data(&tx_buffer);
	/*========Инициализация завершена. Включить дисплей========*/
}







static void lcd1602_Send_init_Data(void) {
	uint8_t init_Data = 0;

	init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
	HAL_Delay(5);
	init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
	HAL_I2C_Master_Transmit(&hi2c1, Adress, init_Data, 1, 10);
	HAL_Delay(5);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
