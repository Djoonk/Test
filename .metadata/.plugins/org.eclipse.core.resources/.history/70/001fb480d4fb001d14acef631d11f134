/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#define LCD_ADDR (0x27<<1)

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
/* USER CODE BEGIN PV */
char str[80] = {0};




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void LCD_En(void);
void LCD_Init(void);
void LCD_WriteDat(uint8_t dat);
void SendInitCmd(uint8_t cmd);
void DisplayOn(void);
void LCD_SendSymbol(uint8_t Dat);
void LCD_PrintText(char *message);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  LCD_Init();
  HAL_Delay(1000);


//LCD_SendSymbol(str);
//	LCD_CmdWrite(0x0|0x80);
	LCD_PrintText("Hello World!");


//	LCD_SendInitCmd(0x41);
////	HAL_Delay(20);
//	LCD_SendInitCmd(0x81);
////  H
//	LCD_SendInitCmd(0x41);
////	HAL_Delay(20);
//	LCD_SendInitCmd(0x91);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  uint8_t Data = 0x30;
//	  lcd1602_SendDat(Data);

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
//	  HAL_Delay(100);


  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/*-----------------------------------------------------------------*/
////  mdelay  ////

void mdelay(uint32_t cnt)
{
	for (uint32_t i = 0; i < (cnt * 1000); i++)
	{

	}

}
////  mdelay  ////



////  udelay  ////
void udelay(uint32_t cnt)
{
	for (uint32_t i = 0; i < (cnt * 1); i++)
	{

	}
}

////  udelay  ////

///// функция EN /////
void LCD_En(void)
{
//	uint8_t TxBuff = 0x08; //включение подсветки
//	TxBuff |= 0x04;
//	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, &TxBuff, 1, 10);
//	HAL_Delay(5);
//	TxBuff &= ~0x04;
//	HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, &TxBuff, 1, 10);
//	HAL_Delay(5);
    uint8_t TxBuff[1] = { 0x08 }; // включение подсветки
    TxBuff[0] |= 0x04;
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, TxBuff, sizeof(TxBuff), 10);
    TxBuff[0] &= ~0x04;
    HAL_Delay(5);
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, TxBuff, sizeof(TxBuff), 10);
}
/*-----------------------------------------------------------------*/
/////Send Command/////
void LCD_SendInitCmd(uint8_t cmd)
{
//    uint8_t data = cmd;
//    HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
//    LCD_En();  // Генерация сигнала Enable
		uint8_t data = 0;
	    data = cmd;
	    data |= 0x04|0x08;
	   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
	   	data &= ~0x04;
	   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
}
/////Send Command/////



/*-----------------------------------------------------------------*/




/*========Display Init========*/

void LCD_Init(void)
{
	//Start init//
	HAL_Delay(20);
	LCD_SendInitCmd(0x30);
	HAL_Delay(5);
	LCD_SendInitCmd(0x30);
	HAL_Delay(150);
	LCD_SendInitCmd(0x30);
	//Start init//

	//Set 4bit interface//
	LCD_SendInitCmd(0x20);
	//Set 4bit interface//

	//Function set//
	LCD_SendInitCmd(0x20);
//	HAL_Delay(20);
	LCD_SendInitCmd(0xC0);
//	HAL_Delay(20);
	//Function set//

	//Display off//
	LCD_SendInitCmd(0x00);
//	HAL_Delay(20);
	LCD_SendInitCmd(0x80);
//	HAL_Delay(20);
	//Display off//

	//Display clear//
	LCD_SendInitCmd(0x00);
//	HAL_Delay(20);
	LCD_SendInitCmd(0x10);
	HAL_Delay(20);
	/*===Display clear===*/

	//Entry mode set//
	LCD_SendInitCmd(0x00);
//	HAL_Delay(20);
	LCD_SendInitCmd(0x60);
	HAL_Delay(20);
	//Entry mode set//

	//Return_Home//
	LCD_SendInitCmd(0x00);
//    HAL_Delay(20);
	LCD_SendInitCmd(0x30);
    HAL_Delay(20);
	//Return_Home//

	//Инициализация завершена. Включить дисплей//
    LCD_SendInitCmd(0x00);
    LCD_SendInitCmd(0xC0);
	//Инициализация завершена. Включить дисплей//
}
/*========Display Init========*/




/*==== Display On, Cursor On, BlincCurs On ====*/
void DisplayOn(void)
{
	LCD_SendInitCmd(0x00);
//HAL_Delay(20);
	LCD_SendInitCmd(0xF0);
	HAL_Delay(20);
}
/*==== Display On, Cursor On, BlincCurs On ====*/




/*==== LCD_SendSymbol ====*/
void LCD_SendSymbol(uint8_t Dat)
{
	uint8_t sendData[1] =  { 0 };
	sendData[0] = Dat & 0xf0;
	sendData[1] = Dat << 4;
	LCD_Write(sendData[0]);
	LCD_Write(sendData[1]);
}
/*==== LCD_SendSymbol ====*/





/*==== Command Send Data ====*/
void LCD_Write(uint8_t dat)
{
	uint8_t data = 0;
    data = dat;
    data |= 0x04|0x08|0x01;
   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
   	data &= ~0x04;
   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
}
/*==== Command Send Data ====*/



void LCD_CmdWrite(uint8_t dat)
{
	uint8_t data = 0;
    data = dat;
    data |= 0x04|0x08;
   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
   	data &= ~0x04;
   	HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDR, &data, 1, 10);
}




/*==== Send Message ====*/
void LCD_PrintText(char *message)
{
    while (*message)
    {
    	LCD_SendSymbol(*message++);
    }
}
/*==== Send Message ====*/

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
